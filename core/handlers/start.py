import logging

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram_dialog import StartMode, DialogManager
from aiogram.types import Message
import aiohttp
from core.states.StartSG import StartSG
from core.config_data.config import Config, Server
from core.config_data.config import load_config
from core.states.ContactSG import ContactSG

from aiogram import Bot, Dispatcher
from aiogram.enums import ContentType
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, Message
from aiogram_dialog import Dialog, DialogManager, setup_dialogs, StartMode, Window
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Next
from aiogram_dialog.widgets.text import Const


start_router = Router()
logger = logging.getLogger(__name__)

config = load_config()


async def get_user(tg_id: int):
    get_user_url = f"{config.server.url}/users/{tg_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(get_user_url) as response:
            if response.status == 200:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return await response.json()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            elif response.status == 404:
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.")
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status}")
                return f"Error: {response.status}"  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞


async def get_or_create_user(tg_id: int, username: str, phone: str):
    user = await get_user(tg_id)
    if user is not None:
        return user  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    create_user_url = f"{config.server.url}/users"
    user_data = {"tgID": tg_id, "username": username, "phone": phone}

    async with aiohttp.ClientSession() as session:
        async with session.post(create_user_url, json=user_data) as create_response:
            if create_response.status == 201:
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                return "User created successfully"
            elif create_response.status == 409:
                return "User already exists"
            else:
                return f"Failed to create user: {create_response.status}"


            
@start_router.message(CommandStart())
async def cmd_start(msg: Message, dialog_manager: DialogManager):
    tg_id = msg.from_user.id
    user = await get_user(tg_id)

    if user is None:
        logger.info(f"–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id={tg_id}")
        await dialog_manager.start(ContactSG.start, mode=StartMode.RESET_STACK)
    else:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tg_id={tg_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await dialog_manager.start(StartSG.start, mode=StartMode.RESET_STACK)


async def get_contact(msg: Message, _, dialog_manager: DialogManager):
    await msg.bot.delete_message(msg.chat.id, dialog_manager.dialog_data["message_id"])
    await dialog_manager.done()
    print(msg.contact.phone_number)
    phone = msg.contact.phone_number
    tg_id = msg.from_user.id
    username = msg.from_user.username or "Anonymous"
    result = await get_or_create_user(tg_id, username, phone)
    await dialog_manager.start(StartSG.start, mode=StartMode.RESET_STACK)
     


async def send_contact(cq: CallbackQuery, _, dialog_manager: DialogManager):
    markup = ReplyKeyboardMarkup(keyboard=[[
        KeyboardButton(text="üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
    ]], resize_keyboard=True)
    message = await cq.message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=markup)
    dialog_manager.dialog_data["message_id"] = message.message_id