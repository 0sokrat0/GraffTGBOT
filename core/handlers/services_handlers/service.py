import json
import logging
import operator
from typing import Optional, List, Dict, Any

import aiohttp
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Select, Radio
from aiogram_dialog.widgets.text import Format

from core.config_data.config import load_config

config = load_config()
logger = logging.getLogger(__name__)


async def get_services() -> Optional[List[Dict[str, Any]]]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ —Å API.
    """
    get_services_url = f"{config.server.url}/services"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(get_services_url) as response:
                content_type = response.headers.get('Content-Type', '')
                logger.info(f"Content-Type: {content_type}")
                if response.status == 200:
                    if 'application/json' in content_type:
                        services = await response.json()
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É—Å–ª—É–≥: {services}")
                        return services
                    else:
                        text = await response.text()
                        try:
                            services = json.loads(text)
                            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É—Å–ª—É–≥ (—Ä—É—á–Ω–∞—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∞): {services}")
                            return services
                        except json.JSONDecodeError:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ JSON.")
                            return None
                elif response.status == 404:
                    logger.info("–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return None
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É—Å–ª—É–≥: {response.status}, {error_text}")
                    return None
    except aiohttp.ClientError as e:
        logger.exception(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —É—Å–ª—É–≥: {e}")
        return None


async def get_service_data(dialog_manager: DialogManager, state: FSMContext, **kwargs) -> Dict[str, Any]:
    """
    –ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ.
    """
    services = await get_services()
    if services:
        services_list = [{'name': service['name'], 'id': int(service['id'])} for service in services]
    else:
        services_list = []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏ –≤ FSM
    await state.update_data(services=services_list)
    logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ FSM: {services_list}")
    return {'services': services_list}


async def handle_service_selected(
    callback: CallbackQuery,
    widget: Radio,
    manager: DialogManager,
    item_id: str
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏.
    """
    logger.info(f"[SERVICE SELECTED] –í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞ —Å ID: {item_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –≤ FSM
    await manager.middleware_data["state"].update_data(selected_service_id=int(item_id))

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state_data = await manager.middleware_data["state"].get_data()
    logger.debug(f"[FSM DATA AFTER SERVICE SELECTED] {current_state_data}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: <b>{item_id}</b>.", parse_mode="HTML")
    await manager.next()


async def service_data_getter(dialog_manager: DialogManager, **kwargs):
    return await get_service_data(dialog_manager, dialog_manager.middleware_data["state"])



services_kbd = Radio(
    checked_text=Format("üîò {item[name]}"),
    unchecked_text=Format("‚ö™ {item[name]}"),
    id="services_radio",
    item_id_getter=operator.itemgetter("id"),
    items="services",
    on_click=handle_service_selected,
)

