import datetime
import json

import aiohttp
import logging
from operator import itemgetter
from aiogram_dialog import DialogManager
from aiogram_dialog.widgets.kbd import Radio
from aiogram_dialog.widgets.text import Format, Const
from aiogram.types import CallbackQuery

from core.config_data.config import load_config

logger = logging.getLogger(__name__)
config = load_config()


async def get_fsm_data(dialog_manager: DialogManager, keys: list[str]):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª—é—á–∞–º.

    :param dialog_manager: –û–±—ä–µ–∫—Ç DialogManager.
    :param keys: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ FSM.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–ª—é—á–∞–º.
    """
    try:
        state_data = await dialog_manager.middleware_data["state"].get_data()
        extracted_data = {key: state_data.get(key) for key in keys}

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        logger.debug(f"[FSM DATA] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {extracted_data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        missing_keys = [key for key, value in extracted_data.items() if value is None]
        if missing_keys:
            logger.warning(f"[FSM DATA] –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏: {missing_keys}")

        return extracted_data
    except Exception as e:
        logger.exception(f"[FSM DATA] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


async def fetch_available_times(service_id: int, specialist_id: int, booking_date: str):
    """
    –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    url = f"{config.server.url}/available_times"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã
    if not service_id or not specialist_id or not booking_date:
        logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        return []

    # –ï—Å–ª–∏ booking_date - –æ–±—ä–µ–∫—Ç datetime.date, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
    if isinstance(booking_date, (datetime.date, datetime)):
        booking_date = booking_date.strftime("%Y-%m-%d")

    params = {
        "service_id": service_id,
        "specialist_id": specialist_id,
        "booking_date": booking_date,
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-–æ—Ç–≤–µ—Ç–∞
                if response.headers.get("Content-Type", "").startswith("application/json"):
                    return await response.json()  # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                else:
                    # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                    text = await response.text()
                    logger.warning(f"[FETCH AVAILABLE TIMES] Non-JSON response: {text}")
                    try:
                        return json.loads(text)
                    except json.JSONDecodeError:
                        logger.error("–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É JSON.")
                        return []
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return []


# Widget Radio –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
async def available_times_getter(dialog_manager: DialogManager, **kwargs):
    """
    –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –µ–≥–æ –≤ Radio-–∫–Ω–æ–ø–∫–∏.
    """
    fsm_data = await get_fsm_data(dialog_manager, ["selected_service_id", "selected_specialist_id", "selected_date"])
    service_id = fsm_data.get("selected_service_id")
    specialist_id = fsm_data.get("selected_specialist_id")
    booking_date = fsm_data.get("selected_date")

    if not service_id or not specialist_id or not booking_date:
        logger.error(f"[AVAILABLE TIMES] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏: {fsm_data}")
        return {"available_times": []}

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    logger.debug(f"[AVAILABLE TIMES] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è service_id={service_id}, specialist_id={specialist_id}, booking_date={booking_date}")

    available_times = await fetch_available_times(service_id, specialist_id, booking_date)

    if not available_times:
        logger.warning(f"[AVAILABLE TIMES] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è service_id={service_id}, specialist_id={specialist_id}, booking_date={booking_date}")
        return {"available_times": []}

    times = [(time, time) for time in available_times]
    logger.debug(f"[AVAILABLE TIMES] –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã: {times}")
    return {"available_times": times}


# Radio Widget
times_kbd = Radio(
    checked_text = Format("üîò {item[0]}"),
    unchecked_text = Format("‚ö™ {item[0]}"),
    id = "r_times",
    item_id_getter = itemgetter(1),  # –ë–µ—Ä–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞
    items = "available_times",  # –î–∞–Ω–Ω—ã–µ –∏–∑ –≥–µ—Ç—Ç–µ—Ä–∞
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
async def on_time_selected(callback: CallbackQuery, widget: Radio, manager: DialogManager, item_id: str):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏.
    """
    logger.info(f"[TIME SELECTED] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è: {item_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ FSM
    await manager.middleware_data["state"].update_data(selected_time=item_id)

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    current_state_data = await manager.middleware_data["state"].get_data()
    logger.debug(f"[FSM DATA AFTER TIME SELECTED] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM: {current_state_data}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: <b>{item_id}</b>.", parse_mode="HTML")
    await manager.next()
