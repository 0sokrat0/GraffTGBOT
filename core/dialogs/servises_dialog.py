# core/dialogs/service_dialog.py
from aiogram_dialog.widgets.kbd import Button
from datetime import date, datetime
from typing import Dict

from aiogram.enums import ParseMode
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import (
    Calendar,
    CalendarScope, Radio, Column, Row,
)
from aiogram_dialog.widgets.kbd import Select, Cancel
from aiogram_dialog.widgets.kbd.calendar_kbd import (
    CalendarUserConfig
)
from aiogram_dialog.widgets.kbd.calendar_kbd import (
    DATE_TEXT,
    TODAY_TEXT,
    CalendarDaysView,
    CalendarMonthView,
    CalendarScopeView,
    CalendarYearsView,
)
from aiogram_dialog.widgets.text import Const, Format, Text
from aiogram_dialog.widgets.text import Multi
from babel.dates import get_day_names, get_month_names

from core.handlers.services_handlers.time import times_kbd, available_times_getter
from core.handlers.services_handlers.calendar import on_date_selected, base_data_getter
from core.handlers.services_handlers.service import services_kbd, service_data_getter
from core.handlers.services_handlers.specialists import handle_specialist_selected, get_specialists_data

SELECTED_DAYS_KEY = "selected_dates"
from core.states.ServicesSG import ServicesSG


class WeekDay(Text):
    async def _render_text(self, data, manager: DialogManager) -> str:
        selected_date: date = data["date"]
        locale = manager.event.from_user.language_code
        return get_day_names(
            width="short", context="stand-alone", locale=locale,
        )[selected_date.weekday()].title()


class MarkedDay(Text):
    def __init__(self, get_work_days, mark_work: str = "", mark_non_work: str = "‚¨úÔ∏è"):
        """
        :param get_work_days: —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
        :param mark_work: —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
        :param mark_non_work: —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ—Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
        """
        super().__init__()
        self.get_work_days = get_work_days
        self.mark_work = mark_work
        self.mark_non_work = mark_non_work

    async def _render_text(self, data, manager: DialogManager) -> str:
        current_date: date = data["date"]
        serial_date = current_date.isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É "YYYY-MM-DD"
        work_days = (
            self.get_work_days(manager)
            if callable(self.get_work_days)
            else self.get_work_days
        )

        day = current_date.day  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞

        if serial_date in work_days:
            return f"{day}"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        return self.mark_non_work  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è


class Month(Text):
    async def _render_text(self, data, manager: DialogManager) -> str:
        selected_date: date = data["date"]
        locale = manager.event.from_user.language_code
        return get_month_names(
            "wide", context="stand-alone", locale=locale,
        )[selected_date.month].title()


class CustomCalendar(Calendar):
    def __init__(self, id: str, on_click, work_days):
        """
        :param id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        :param on_click: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
        :param work_days: —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
        """
        self._work_days = work_days
        super().__init__(id=id, on_click=on_click)

    def _get_work_days(self, manager: DialogManager):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏–∑ `dialog_data`
        if callable(self._work_days):
            return self._work_days({}, manager)
        return self._work_days

    def _init_views(self) -> dict[CalendarScope, CalendarScopeView]:
        return {
            CalendarScope.DAYS: CalendarDaysView(
                self._item_callback_data,
                date_text=MarkedDay(self._get_work_days),  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                today_text=MarkedDay(self._get_work_days, mark_work="‚≠ï", mark_non_work="‚¨úÔ∏è"),  # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å
                header_text="~~~~~ " + Month() + " ~~~~~",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º
                weekday_text=WeekDay(),  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
                next_month_text=Month() + " >>",  # –ö–Ω–æ–ø–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                prev_month_text="<< " + Month(),  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            ),
            CalendarScope.MONTHS: CalendarMonthView(
                self._item_callback_data,
                month_text=Month(),
                header_text="~~~~~ " + Format("{date:%Y}") + " ~~~~~",  # –ì–æ–¥
                this_month_text="[" + Month() + "]",
            ),
            CalendarScope.YEARS: CalendarYearsView(
                self._item_callback_data,
            ),
        }


    async def _get_user_config(
        self, data: Dict, manager: DialogManager
    ) -> CalendarUserConfig:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
        """
        return CalendarUserConfig(
            firstweekday=7,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            min_date=datetime.now().date(),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º
        )

service_dialog = Dialog(
    Window(
        Const(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:</b>'),
        Column(
            Select(
                Format('üíà {item[name]} üíà'),
                id='spec',
                item_id_getter=lambda item: item['id'],
                items='specialists',
                on_click=handle_specialist_selected
            )
        ),
        Row(
            Cancel(text=Const('üìõ –û—Ç–º–µ–Ω–∏—Ç—å')),
        ),
        state=ServicesSG.set_specialist,
        getter=get_specialists_data,
        parse_mode=ParseMode.HTML
    ),
    Window(
        Const(text='<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:</b>'),
        Column(services_kbd),
        Row(
            Button(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back_to_specialist', on_click=lambda c, b, m: m.back()),
            Cancel(text=Const('üìõ –û—Ç–º–µ–Ω–∏—Ç—å'))
        ),
        state=ServicesSG.set_services,
        getter=service_data_getter,
        parse_mode=ParseMode.HTML
    ),
    Window(
        Multi(
            Const('<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å üëá</b>'),
            sep = '\n',
        ),
        CustomCalendar(
            id = "calendar",
            on_click = on_date_selected,
            work_days = lambda data, manager: manager.dialog_data.get("work_days", set()),
        ),
        Row(
            Button(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id = 'back_to_services', on_click = lambda c, b, m: m.back()),
            Cancel(text = Const('üìõ –û—Ç–º–µ–Ω–∏—Ç—å'))
        ),
        state = ServicesSG.set_date,
        getter = base_data_getter,
        parse_mode = ParseMode.HTML,
    ),
    Window(
        Const("<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:</b>"),
        Column(times_kbd),
        Row(
            Button(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back_to_date', on_click=lambda c, b, m: m.back()),
                    Button(Const('–î–∞–ª–µ–µ ‚û°'),id = 'next_to_check',on_click = lambda c, b, m: m.next()),
                    Cancel(text=Const('üìõ –û—Ç–º–µ–Ω–∏—Ç—å'))
        ),
        state=ServicesSG.set_time,
        getter=available_times_getter,
        parse_mode=ParseMode.HTML,
    ))
#     Window(
#         Format("<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:</b>"),
#         Group(
#             Row(
#                         Button(Const('‚óÄÔ∏è –ù–∞–∑–∞–¥'), id='back_to_time', on_click=lambda c, b, m: m.back()),
#                                 # Button(Const('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'), id='confirm', on_click=on_confirm)),
#                   Column(
#                                 Cancel(text=Const('üìõ –û—Ç–º–µ–Ω–∏—Ç—å')))
#         )
#     )
# )
